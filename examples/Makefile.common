include $(LEVEL)/Makefile.config
CFLAG += -fno-builtin -m32 -I $(LEGUP_HOME)/lib/include -I /usr/include/i386-linux-gnu -O3 -fno-vectorize -fno-slp-vectorize
LLVM_BIN = $(LLVM_DIR)/Release+Asserts/bin/
LLVM_LIB = $(LLVM_DIR)/Release+Asserts/lib/
FRONT_END = clang-3.5
LEGUP_EXAMPLE_CONFIG=$(LEGUP_HOME)/examples/legup.tcl
BOARD_TOPS_CMD = find $(LEGUP_HOME)/boards -maxdepth 3 -name "top.v"
export BOARD_TOPS = $(shell $(BOARD_TOPS_CMD))
WRAPPER_DIR=$(LEVEL)/libs/WrapperGeneration

%.legupfront.bc: %.bc
	$(LLVM_BIN)opt -mem2reg -loops -loop-simplify < $< > 1.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -std-link-opts < 1.$< -o 2.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -legup-prelto < 2.$< > 3.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -std-link-opts < 3.$< -o 4.$< 
	$(LLVM_BIN)llvm-link  4.$< $(LEGUP_HOME)/examples/lib/llvm/liblegup.bc $(LEGUP_HOME)/examples/lib/llvm/libm.bc -o 5.$< 
	$(LLVM_BIN)opt -internalize-public-api-list=main -internalize -globaldce 5.$< -o 6.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -instcombine -std-link-opts < 6.$< -o 7.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -basicaa -loop-simplify -indvars2  -loop-pipeline 7.$< -o 8.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLegUp.so -legup-config=$(LEGUP_HOME)/examples/legup.tcl -legup-config=config.tcl -instcombine 8.$< -o 9.$< 
	$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMLabelBB.so -LabelBB < 9.$< > $@ 

%.stitchedup.v: %.legupfront.stitchedup.bc
	$(LLVM_BIN)llc -legup-config=$(LEGUP_EXAMPLE_CONFIG) -legup-config=config.tcl -march=stitchup $< -orig_sched $(shell pwd)/original.scheduling.rpt.keep -o $@

%.orig.v: %.legupfront.orig.bc
	$(LLVM_BIN)llc -legup-config=$(LEGUP_EXAMPLE_CONFIG) -legup-config=config.tcl -march=v $< -o $@

%.legupfront.stitchedup.bc: %.legupfront.bc
	@$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMStitchUp.so -StitchUp < $< > $@

%.ll: %.bc
	$(LLVM_BIN)llvm-dis $<

%.bc: %.c
	$(FRONT_END) $< -emit-llvm -c $(CFLAG) -o $@

%.orig.bc: %.ll
	$(LLVM_BIN)llvm-as $< -o $@ 

%.stitchedup.bc: %.ll
	$(LLVM_BIN)llvm-as $< -o tmp.bc 
	@$(LLVM_BIN)opt -load=$(LLVM_LIB)LLVMStitchUp.so -StitchUp < tmp.bc > $@
	rm tmp.bc

%_tb.v: %.wrapper.v %.renamed.stitchedup_c.v %.orig_c.v
	python $(WRAPPER_DIR)/generateTB.py --wrapper $*.wrapper.v --tb $@ --simscript runVsim --stitchup $*.renamed.stitchedup_c.v --orig $*.orig_c.v
	chmod u+x runVsim
	chmod u+x runVsim_worklib

#Generate the wrapper for each
%.wrapper.v: %.renamed.stitchedup_c.v %.orig_c.v
	python $(WRAPPER_DIR)/generateWrapper.py --orig $*.orig_c.v --stitchup $*.renamed,stitchedup_c.v --wrapper $@

#rename the stitchup file
%.renamed.stitchedup.v: %.stitchedup.v
	python $(WRAPPER_DIR)/renameStitchupTop.py --stitchup $<
	sed -i '/resmain/d' $<
	mv $< $@

#Expose the state register of the circuit
%_c.v: %.v
	python $(WRAPPER_DIR)/exposeStateReg.py --ifile $< --ofile $@

#Package the wrapper into a vivado IP core
%.ipcore: %.wrapper.v
	cp -r $(LEVEL)/libs/AXIWrapper ./
	cp *.v *.mif ./AXIWrapper/AXIWrapperStitchUp_1.0/hdl
	cp ../libs/*.v ./AXIWrapper/AXIWrapperStitchUp_1.0/hdl
	(cd ./AXIWrapper; ./createPackageScript)
	vivado -mode batch -source ./AXIWrapper/_packageIPScript.tcl
	touch $< 

#Build a Zynq System with the protected IP placed on a known bus address
%.system.bit: %.ipcore
	cp $(LEVEL)/config/vivado_build.tcl ./
	vivado -mode batch -source vivado_build.tcl
